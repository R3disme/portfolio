===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\app.css =====
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
 
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
 
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
 
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
 
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
 
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
 
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
 
    --destructive: 0 72.2% 50.6%;
    --destructive-foreground: 0 0% 98%;
 
    --ring: 0 0% 3.9%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
 
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
 
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
 
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
 
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
 
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
 
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
 
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
 
    --ring: 0 0% 83.1%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\app.d.ts =====
// See https://kit.svelte.dev/docs/types#app
// for information about these interfaces
declare global {
	namespace App {
		// interface Error {}
		// interface Locals {}
		// interface PageData {}
		// interface PageState {}
		// interface Platform {}
	}
}

export {};




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\app.html =====
<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" href="%sveltekit.assets%/favicon.png" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		%sveltekit.head%
	</head>
	<body data-sveltekit-preload-data="hover">
		<div style="display: contents">%sveltekit.body%</div>
	</body>
</html>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\index.ts =====
// place files you want to import through the `$lib` alias in this folder.




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\utils.ts =====
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
import { cubicOut } from "svelte/easing";
import type { TransitionConfig } from "svelte/transition";

export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}

type FlyAndScaleParams = {
	y?: number;
	x?: number;
	start?: number;
	duration?: number;
};

export const flyAndScale = (
	node: Element,
	params: FlyAndScaleParams = { y: -8, x: 0, start: 0.95, duration: 150 }
): TransitionConfig => {
	const style = getComputedStyle(node);
	const transform = style.transform === "none" ? "" : style.transform;

	const scaleConversion = (
		valueA: number,
		scaleA: [number, number],
		scaleB: [number, number]
	) => {
		const [minA, maxA] = scaleA;
		const [minB, maxB] = scaleB;

		const percentage = (valueA - minA) / (maxA - minA);
		const valueB = percentage * (maxB - minB) + minB;

		return valueB;
	};

	const styleToString = (
		style: Record<string, number | string | undefined>
	): string => {
		return Object.keys(style).reduce((str, key) => {
			if (style[key] === undefined) return str;
			return str + `${key}:${style[key]};`;
		}, "");
	};

	return {
		duration: params.duration ?? 200,
		delay: 0,
		css: (t) => {
			const y = scaleConversion(t, [0, 1], [params.y ?? 5, 0]);
			const x = scaleConversion(t, [0, 1], [params.x ?? 0, 0]);
			const scale = scaleConversion(t, [0, 1], [params.start ?? 0.95, 1]);

			return styleToString({
				transform: `${transform} translate3d(${x}px, ${y}px, 0) scale(${scale})`,
				opacity: t
			});
		},
		easing: cubicOut
	};
};



===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\icon.svelte =====
<script lang="ts">
	import { cn } from "$lib/utils.js";

	export let className: string = "";
	export let src: string = "";
	export let alt: string = "";
	export { className as class };
</script>

<img
	src={src}
	{alt}
	class={cn("aspect-square h-full w-full", className)}
	{...$$restProps}
/>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\button\button.svelte =====
<script lang="ts">
	import { Button as ButtonPrimitive } from "bits-ui";
	import { type Events, type Props, buttonVariants } from "./index.js";
	import { cn } from "$lib/utils.js";

	type $$Props = Props;
	type $$Events = Events;

	let className: $$Props["class"] = undefined;
	export let variant: $$Props["variant"] = "default";
	export let size: $$Props["size"] = "default";
	export let builders: $$Props["builders"] = [];
	export { className as class };
</script>

<ButtonPrimitive.Root
	{builders}
	class={cn(buttonVariants({ variant, size, className }))}
	type="button"
	{...$$restProps}
	on:click
	on:keydown
>
	<slot />
</ButtonPrimitive.Root>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\button\index.ts =====
import { type VariantProps, tv } from "tailwind-variants";
import type { Button as ButtonPrimitive } from "bits-ui";
import Root from "./button.svelte";

const buttonVariants = tv({
	base: "ring-offset-background focus-visible:ring-ring inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
	variants: {
		variant: {
			default: "bg-primary text-primary-foreground hover:bg-primary/90",
			destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
			outline:
				"border-input bg-background hover:bg-accent hover:text-accent-foreground border",
			secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
			ghost: "hover:bg-accent hover:text-accent-foreground",
			link: "text-primary underline-offset-4 hover:underline",
		},
		size: {
			default: "h-10 px-4 py-2",
			sm: "h-9 rounded-md px-3",
			lg: "h-11 rounded-md px-8",
			icon: "h-10 w-10",
		},
	},
	defaultVariants: {
		variant: "default",
		size: "default",
	},
});

type Variant = VariantProps<typeof buttonVariants>["variant"];
type Size = VariantProps<typeof buttonVariants>["size"];

type Props = ButtonPrimitive.Props & {
	variant?: Variant;
	size?: Size;
};

type Events = ButtonPrimitive.Events;

export {
	Root,
	type Props,
	type Events,
	//
	Root as Button,
	type Props as ButtonProps,
	type Events as ButtonEvents,
	buttonVariants,
};




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\card\card-content.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div class={cn("p-6 pt-0", className)} {...$$restProps}>
	<slot />
</div>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\card\card-description.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLParagraphElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<p class={cn("text-muted-foreground text-sm", className)} {...$$restProps}>
	<slot />
</p>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\card\card-footer.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div class={cn("flex items-center p-6 pt-0", className)} {...$$restProps}>
	<slot />
</div>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\card\card-header.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div class={cn("flex flex-col space-y-1.5 p-6", className)} {...$$restProps}>
	<slot />
</div>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\card\card-title.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import type { HeadingLevel } from "./index.js";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLHeadingElement> & {
		tag?: HeadingLevel;
	};

	let className: $$Props["class"] = undefined;
	export let tag: $$Props["tag"] = "h3";
	export { className as class };
</script>

<svelte:element
	this={tag}
	class={cn("text-lg font-semibold leading-none tracking-tight", className)}
	{...$$restProps}
>
	<slot />
</svelte:element>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\card\card.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<div
	class={cn("bg-card text-card-foreground rounded-lg border shadow-sm", className)}
	{...$$restProps}
>
	<slot />
</div>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\card\index.ts =====
import Root from "./card.svelte";
import Content from "./card-content.svelte";
import Description from "./card-description.svelte";
import Footer from "./card-footer.svelte";
import Header from "./card-header.svelte";
import Title from "./card-title.svelte";

export {
	Root,
	Content,
	Description,
	Footer,
	Header,
	Title,
	//
	Root as Card,
	Content as CardContent,
	Description as CardDescription,
	Footer as CardFooter,
	Header as CardHeader,
	Title as CardTitle,
};

export type HeadingLevel = "h1" | "h2" | "h3" | "h4" | "h5" | "h6";




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\carousel\carousel-content.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import emblaCarouselSvelte from "embla-carousel-svelte";
	import { getEmblaContext } from "./context.js";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLDivElement>;

	let className: string | undefined | null = undefined;
	export { className as class };

	const { orientation, options, plugins, onInit } = getEmblaContext("<Carousel.Content/>");
</script>

<div
	class="overflow-hidden"
	use:emblaCarouselSvelte={{
		options: {
			container: "[data-embla-container]",
			slides: "[data-embla-slide]",
			...$options,
			axis: $orientation === "horizontal" ? "x" : "y",
		},
		plugins: $plugins,
	}}
	on:emblaInit={onInit}
>
	<div
		class={cn("flex", $orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col", className)}
		data-embla-container=""
		{...$$restProps}
	>
		<slot />
	</div>
</div>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\carousel\carousel-item.svelte =====
<script lang="ts">
	import type { HTMLAttributes } from "svelte/elements";
	import { getEmblaContext } from "./context.js";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLAttributes<HTMLDivElement>;
	let className: string | undefined | null = undefined;
	export { className as class };

	const { orientation } = getEmblaContext("<Carousel.Item/>");
</script>

<div
	role="group"
	aria-roledescription="slide"
	class={cn(
		"min-w-0 shrink-0 grow-0 basis-full",
		$orientation === "horizontal" ? "pl-4" : "pt-4",
		className
	)}
	data-embla-slide=""
	{...$$restProps}
>
	<slot />
</div>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\carousel\carousel-next.svelte =====
<script lang="ts">
	import ArrowRight from "lucide-svelte/icons/arrow-right";
	import type { VariantProps } from "tailwind-variants";
	import { getEmblaContext } from "./context.js";
	import { cn } from "$lib/utils.js";
	import {
		Button,
		type Props,
		type buttonVariants,
	} from "$lib/components/ui/button/index.js";

	type $$Props = Props;

	let className: $$Props["class"] = undefined;
	export { className as class };
	export let variant: VariantProps<typeof buttonVariants>["variant"] = "outline";
	export let size: VariantProps<typeof buttonVariants>["size"] = "icon";
	const { orientation, canScrollNext, scrollNext, handleKeyDown } =
		getEmblaContext("<Carousel.Next/>");
</script>

<Button
	{variant}
	{size}
	class={cn(
		"absolute h-8 w-8 touch-manipulation rounded-full",
		$orientation === "horizontal"
			? "-right-12 top-1/2 -translate-y-1/2"
			: "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
		className
	)}
	disabled={!$canScrollNext}
	on:click={scrollNext}
	on:keydown={handleKeyDown}
	{...$$restProps}
>
	<ArrowRight class="h-4 w-4" />
	<span class="sr-only">Next slide</span>
</Button>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\carousel\carousel-previous.svelte =====
<script lang="ts">
	import ArrowLeft from "lucide-svelte/icons/arrow-left";
	import type { VariantProps } from "tailwind-variants";
	import { getEmblaContext } from "./context.js";
	import { cn } from "$lib/utils.js";
	import {
		Button,
		type Props,
		type buttonVariants,
	} from "$lib/components/ui/button/index.js";

	type $$Props = Props;

	let className: $$Props["class"] = undefined;
	export { className as class };
	export let variant: VariantProps<typeof buttonVariants>["variant"] = "outline";
	export let size: VariantProps<typeof buttonVariants>["size"] = "icon";

	const { orientation, canScrollPrev, scrollPrev, handleKeyDown } =
		getEmblaContext("<Carousel.Previous/>");
</script>

<Button
	{variant}
	{size}
	class={cn(
		"absolute h-8 w-8 touch-manipulation rounded-full",
		$orientation === "horizontal"
			? "-left-12 top-1/2 -translate-y-1/2"
			: "-top-12 left-1/2 -translate-x-1/2 rotate-90",
		className
	)}
	disabled={!$canScrollPrev}
	on:click={scrollPrev}
	on:keydown={handleKeyDown}
	{...$$restProps}
>
	<ArrowLeft class="h-4 w-4" />
	<span class="sr-only">Previous slide</span>
</Button>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\carousel\carousel.svelte =====
<script lang="ts">
	import { writable } from "svelte/store";
	import { onDestroy } from "svelte";
	import { type CarouselAPI, type CarouselProps, setEmblaContext } from "./context.js";
	import { cn } from "$lib/utils.js";

	type $$Props = CarouselProps;

	export let opts = {};
	export let plugins: NonNullable<$$Props["plugins"]> = [];
	export let api: $$Props["api"] = undefined;
	export let orientation: NonNullable<$$Props["orientation"]> = "horizontal";

	let className: $$Props["class"] = undefined;
	export { className as class };

	const apiStore = writable<CarouselAPI | undefined>(undefined);
	const orientationStore = writable(orientation);
	const canScrollPrev = writable(false);
	const canScrollNext = writable(false);
	const optionsStore = writable(opts);
	const pluginStore = writable(plugins);
	const scrollSnapsStore = writable<number[]>([]);
	const selectedIndexStore = writable(0);

	$: orientationStore.set(orientation);
	$: pluginStore.set(plugins);
	$: optionsStore.set(opts);

	function scrollPrev() {
		api?.scrollPrev();
	}
	function scrollNext() {
		api?.scrollNext();
	}
	function scrollTo(index: number, jump?: boolean) {
		api?.scrollTo(index, jump);
	}

	function onSelect(api: CarouselAPI) {
		if (!api) return;
		canScrollPrev.set(api.canScrollPrev());
		canScrollNext.set(api.canScrollNext());
	}

	$: if (api) {
		onSelect(api);
		api.on("select", onSelect);
		api.on("reInit", onSelect);
	}

	function handleKeyDown(e: KeyboardEvent) {
		if (e.key === "ArrowLeft") {
			e.preventDefault();
			scrollPrev();
		} else if (e.key === "ArrowRight") {
			e.preventDefault();
			scrollNext();
		}
	}

	setEmblaContext({
		api: apiStore,
		scrollPrev,
		scrollNext,
		orientation: orientationStore,
		canScrollNext,
		canScrollPrev,
		handleKeyDown,
		options: optionsStore,
		plugins: pluginStore,
		onInit,
		scrollSnaps: scrollSnapsStore,
		selectedIndex: selectedIndexStore,
		scrollTo,
	});

	function onInit(event: CustomEvent<CarouselAPI>) {
		api = event.detail;
		apiStore.set(api);
		scrollSnapsStore.set(api.scrollSnapList());
	}

	onDestroy(() => {
		api?.off("select", onSelect);
	});
</script>

<div
	class={cn("relative", className)}
	on:mouseenter
	on:mouseleave
	role="region"
	aria-roledescription="carousel"
	{...$$restProps}
>
	<slot />
</div>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\carousel\context.ts =====
import type { EmblaCarouselSvelteType } from "embla-carousel-svelte";
import type emblaCarouselSvelte from "embla-carousel-svelte";
import { getContext, hasContext, setContext } from "svelte";
import type { HTMLAttributes } from "svelte/elements";
import type { Readable, Writable } from "svelte/store";

export type CarouselAPI =
	NonNullable<NonNullable<EmblaCarouselSvelteType["$$_attributes"]>["on:emblaInit"]> extends (
		evt: CustomEvent<infer CarouselAPI>
	) => void
		? CarouselAPI
		: never;

type EmblaCarouselConfig = NonNullable<Parameters<typeof emblaCarouselSvelte>[1]>;

export type CarouselOptions = EmblaCarouselConfig["options"];
export type CarouselPlugins = EmblaCarouselConfig["plugins"];

////

export type CarouselProps = {
	opts?: CarouselOptions;
	plugins?: CarouselPlugins;
	api?: CarouselAPI;
	orientation?: "horizontal" | "vertical";
} & HTMLAttributes<HTMLDivElement>;

const EMBLA_CAROUSEL_CONTEXT = Symbol("EMBLA_CAROUSEL_CONTEXT");

type EmblaContext = {
	api: Writable<CarouselAPI | undefined>;
	orientation: Writable<"horizontal" | "vertical">;
	scrollNext: () => void;
	scrollPrev: () => void;
	canScrollNext: Readable<boolean>;
	canScrollPrev: Readable<boolean>;
	handleKeyDown: (e: KeyboardEvent) => void;
	options: Writable<CarouselOptions>;
	plugins: Writable<CarouselPlugins>;
	onInit: (e: CustomEvent<CarouselAPI>) => void;
	scrollTo: (index: number, jump?: boolean) => void;
	scrollSnaps: Readable<number[]>;
	selectedIndex: Readable<number>;
};

export function setEmblaContext(config: EmblaContext): EmblaContext {
	setContext(EMBLA_CAROUSEL_CONTEXT, config);
	return config;
}

export function getEmblaContext(name = "This component") {
	if (!hasContext(EMBLA_CAROUSEL_CONTEXT)) {
		throw new Error(`${name} must be used within a <Carousel.Root> component`);
	}
	return getContext<ReturnType<typeof setEmblaContext>>(EMBLA_CAROUSEL_CONTEXT);
}




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\carousel\index.ts =====
export { default as Root } from "./carousel.svelte";
export { default as Content } from "./carousel-content.svelte";
export { default as Item } from "./carousel-item.svelte";
export { default as Previous } from "./carousel-previous.svelte";
export { default as Next } from "./carousel-next.svelte";




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\input\index.ts =====
import Root from "./input.svelte";

export type FormInputEvent<T extends Event = Event> = T & {
	currentTarget: EventTarget & HTMLInputElement;
};
export type InputEvents = {
	blur: FormInputEvent<FocusEvent>;
	change: FormInputEvent<Event>;
	click: FormInputEvent<MouseEvent>;
	focus: FormInputEvent<FocusEvent>;
	focusin: FormInputEvent<FocusEvent>;
	focusout: FormInputEvent<FocusEvent>;
	keydown: FormInputEvent<KeyboardEvent>;
	keypress: FormInputEvent<KeyboardEvent>;
	keyup: FormInputEvent<KeyboardEvent>;
	mouseover: FormInputEvent<MouseEvent>;
	mouseenter: FormInputEvent<MouseEvent>;
	mouseleave: FormInputEvent<MouseEvent>;
	mousemove: FormInputEvent<MouseEvent>;
	paste: FormInputEvent<ClipboardEvent>;
	input: FormInputEvent<InputEvent>;
	wheel: FormInputEvent<WheelEvent>;
};

export {
	Root,
	//
	Root as Input,
};




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\input\input.svelte =====
<script lang="ts">
	import type { HTMLInputAttributes } from "svelte/elements";
	import type { InputEvents } from "./index.js";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLInputAttributes;
	type $$Events = InputEvents;

	let className: $$Props["class"] = undefined;
	export let value: $$Props["value"] = undefined;
	export { className as class };

	// Workaround for https://github.com/sveltejs/svelte/issues/9305
	// Fixed in Svelte 5, but not backported to 4.x.
	export let readonly: $$Props["readonly"] = undefined;
</script>

<input
	class={cn(
		"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md border px-3 py-2 text-sm file:border-0 file:bg-transparent file:text-sm file:font-medium focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
		className
	)}
	bind:value
	{readonly}
	on:blur
	on:change
	on:click
	on:focus
	on:focusin
	on:focusout
	on:keydown
	on:keypress
	on:keyup
	on:mouseover
	on:mouseenter
	on:mouseleave
	on:mousemove
	on:paste
	on:input
	on:wheel|passive
	{...$$restProps}
/>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\label\index.ts =====
import Root from "./label.svelte";

export {
	Root,
	//
	Root as Label,
};




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\label\label.svelte =====
<script lang="ts">
	import { Label as LabelPrimitive } from "bits-ui";
	import { cn } from "$lib/utils.js";

	type $$Props = LabelPrimitive.Props;
	type $$Events = LabelPrimitive.Events;

	let className: $$Props["class"] = undefined;
	export { className as class };
</script>

<LabelPrimitive.Root
	class={cn(
		"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70",
		className
	)}
	{...$$restProps}
	on:mousedown
>
	<slot />
</LabelPrimitive.Root>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\sonner\index.ts =====
export { default as Toaster } from "./sonner.svelte";




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\sonner\sonner.svelte =====
<script lang="ts">
	import { Toaster as Sonner, type ToasterProps as SonnerProps } from "svelte-sonner";
	import { mode } from "mode-watcher";

	type $$Props = SonnerProps;
</script>

<Sonner
	theme={$mode}
	class="toaster group"
	toastOptions={{
		classes: {
			toast: "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
			description: "group-[.toast]:text-muted-foreground",
			actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
			cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
		},
	}}
	{...$$restProps}
/>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\textarea\index.ts =====
import Root from "./textarea.svelte";

type FormTextareaEvent<T extends Event = Event> = T & {
	currentTarget: EventTarget & HTMLTextAreaElement;
};

type TextareaEvents = {
	blur: FormTextareaEvent<FocusEvent>;
	change: FormTextareaEvent<Event>;
	click: FormTextareaEvent<MouseEvent>;
	focus: FormTextareaEvent<FocusEvent>;
	keydown: FormTextareaEvent<KeyboardEvent>;
	keypress: FormTextareaEvent<KeyboardEvent>;
	keyup: FormTextareaEvent<KeyboardEvent>;
	mouseover: FormTextareaEvent<MouseEvent>;
	mouseenter: FormTextareaEvent<MouseEvent>;
	mouseleave: FormTextareaEvent<MouseEvent>;
	paste: FormTextareaEvent<ClipboardEvent>;
	input: FormTextareaEvent<InputEvent>;
};

export {
	Root,
	//
	Root as Textarea,
	type TextareaEvents,
	type FormTextareaEvent,
};




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\lib\components\ui\textarea\textarea.svelte =====
<script lang="ts">
	import type { HTMLTextareaAttributes } from "svelte/elements";
	import type { TextareaEvents } from "./index.js";
	import { cn } from "$lib/utils.js";

	type $$Props = HTMLTextareaAttributes;
	type $$Events = TextareaEvents;

	let className: $$Props["class"] = undefined;
	export let value: $$Props["value"] = undefined;
	export { className as class };

	// Workaround for https://github.com/sveltejs/svelte/issues/9305
	// Fixed in Svelte 5, but not backported to 4.x.
	export let readonly: $$Props["readonly"] = undefined;
</script>

<textarea
	class={cn(
		"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex min-h-[80px] w-full rounded-md border px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
		className
	)}
	bind:value
	{readonly}
	on:blur
	on:change
	on:click
	on:focus
	on:keydown
	on:keypress
	on:keyup
	on:mouseover
	on:mouseenter
	on:mouseleave
	on:paste
	on:input
	{...$$restProps}
></textarea>




===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\routes\+layout.svelte =====
<script lang="ts">
    import "../app.css";
	import { onMount } from "svelte";
    import { ModeWatcher, toggleMode } from "mode-watcher";
    import { Toaster } from "$lib/components/ui/sonner";
	import { Button } from "$lib/components/ui/button";
    import Code2 from "lucide-svelte/icons/code-xml";
    import Sun from "lucide-svelte/icons/sun";
    import Moon from "lucide-svelte/icons/moon";
    import Cpu from "lucide-svelte/icons/cpu";


    let isMobile = false;
  
    onMount(() => {
      const checkMobile = () => {
        isMobile = window.innerWidth < 768;
      };
      checkMobile();
      window.addEventListener('resize', checkMobile);
      return () => window.removeEventListener('resize', checkMobile);
    });

    const navItems = [
        { label: "technologies", href: "#technologies" },
        { label: "projects", href: "#projects" },
        { label: "services", href: "#services" },
    ];
</script>

<ModeWatcher />
<Toaster />
<body class="font-mono">
    <header class="px-4 lg:px-6 h-14 flex items-center">
        <div class="gap-x-3 flex items-center">
            <a class="flex items-center justify-center" href="/">
                <Code2 class="h-6 w-6" />
                <span class="sr-only">Home page</span>
            </a>
            <Button on:click={toggleMode} variant="ghost" size="icon">
                <Sun
                class="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0"
                />
                <Moon
                class="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"
                />
                <span class="sr-only">Toggle theme</span>
            </Button>
        </div>
        <nav class="ml-auto flex gap-4 sm:gap-6">
            <a class="text-sm font-medium hover:underline underline-offset-4" href="#technologies">
            Teknologier
            </a>
            <a class="text-sm font-medium hover:underline underline-offset-4" href="#projects">
            Prosjekter
            </a>
            <a class="text-sm font-medium hover:underline underline-offset-4" href="#services">
            Tjenester
            </a>
        </nav>
    </header>
    <slot />
</body>



===== C:\Users\mats\OneDrive - Rogaland Fylkeskommune EES\1IMA_MatsDaleSoma\programfag\Prosjekter\idk\portfolio\src\routes\+page.svelte =====
<script lang="ts">
	import { Button } from '$lib/components/ui/button';
	import { Input } from '$lib/components/ui/input';
	import { Label } from '$lib/components/ui/label';
	import { Textarea } from '$lib/components/ui/textarea';
	import * as Card from '$lib/components/ui/card';
	import * as Carousel from '$lib/components/ui/carousel/index.js';
	import Github from 'lucide-svelte/icons/github';
	import BookText from 'lucide-svelte/icons/book-text';
	import Mail from 'lucide-svelte/icons/mail';
	import Bot from 'lucide-svelte/icons/bot';
	import Laptop from 'lucide-svelte/icons/laptop';
	import Code from 'lucide-svelte/icons/code';
	import Smartphone from 'lucide-svelte/icons/smartphone';
	import User from 'lucide-svelte/icons/user';
	import Bug from 'lucide-svelte/icons/bug';
	import Send from 'lucide-svelte/icons/send';
	import Icon from '$lib/components/ui/icon.svelte';

	const icon_links = [
		{
			label: 'GitHub',
			url: 'https://github.com/r3disme',
			icon: Github
		},
		{
			label: 'Resume',
			url: '',
			icon: BookText
		},
		{
			label: 'Email',
			url: 'mailto:mats@soma.nu',
			icon: Mail
		}
	];

	const technologies = [
		{
			name: 'HTML',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/html5/html5-original.svg'
		},
		{
			name: 'CSS',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/css3/css3-original.svg'
		},
		{
			name: 'Python',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/python/python-original.svg'
		},
		{
			name: 'JavaScript',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/javascript/javascript-original.svg'
		},
		{
			name: 'TypeScript',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/typescript/typescript-original.svg'
		},
		{
			name: 'Node.js',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/nodejs/nodejs-original.svg'
		},
		{
			name: 'Sveltekit',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/svelte/svelte-original.svg'
		},
		{
			name: 'Git',
			icon: 'https://cdn.jsdelivr.net/gh/devicons/devicon@latest/icons/git/git-original.svg'
		}
	];

	const Projects = [
		{
			name: 'SV-Chat',
			description: 'SV-Chat is a chat tool i developed alongside a friend',
			image: 'https://i.ibb.co/F4J4XmBK/logo.png',
			url: 'https://github.com/Redveil-SVchat/SVchat'
		}
		
	];
	const services = [
		{
			icon: Code,
			title: 'Nettside Koding',
			description: 'Jeg kan hjelpe med å lage en nettside til deg eller din bedrift.'
		},
		{
			icon: Bug,
			title: 'Bug Hunting & fiksing',
			description: 'Finne og fikse bugs i koden din'
		}
	];
	let formData = {
		name: '',
		email: '',
		subject: '',
		message: ''
	};

	let isSubmitting = false;

	const handleSubmit = async (event: Event) => {
		event.preventDefault();
		isSubmitting = true;

		// send form data to backend via post request
    const url = 'https://formspree.io/f/mldwaagb';
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    });
		isSubmitting = false;
		// Reset form after submission
		formData = { name: '', email: '', subject: '', message: '' };
	};
</script>

<section class="flex min-h-screen flex-col" id="home">
	<div class="flex flex-1 items-center justify-center px-4 md:px-6">
		<div class="grid gap-6 lg:grid-cols-[1fr_400px] lg:gap-12 xl:grid-cols-[1fr_600px]">
			<div class="flex flex-col justify-center space-y-4">
				<div class="space-y-2">
					<h1 class="text-3xl font-bold tracking-tighter sm:text-5xl xl:text-6xl/none">
						Mats Dale Soma
					</h1>
					<p class="text-xl">Student</p>
					<p class="max-w-[600px] md:text-xl">
						Jeg er en 16 år gammel student ved Gand VGS som driver med koding på fritid.
					</p>
				</div>
				<div class="flex flex-col gap-2 min-[640px]:flex-row">
					<Button>Se prosjekt</Button>
					<Button variant="outline">Kontakt</Button>
				</div>
				<div class="flex space-x-4 self-center sm:self-start">
					{#each icon_links as icon_link}
						<a href={icon_link.url}>
							<svelte:component this={icon_link.icon} class="h-6 w-6" />
							<span class="sr-only">{icon_link.label}</span>
						</a>
					{/each}
				</div>
			</div>
			<div class="flex items-center justify-center"></div>
		</div>
	</div>
</section>
<section id="technologies" class="mx-8">
	<Card.Root class="mx-auto w-full">
		<Card.Header>
			<Card.Title class="text-center text-2xl font-bold">Kodespråk jeg kan</Card.Title>
		</Card.Header>
		<Card.Content>
			<ul class="grid grid-cols-2 gap-4 md:grid-cols-3 lg:grid-cols-4">
				{#each technologies as tech}
					<li
						class="flex flex-col items-center gap-y-1 rounded-lg bg-muted/50 p-2 transition-colors hover:bg-muted"
					>
						<Icon src={tech.icon} class="h-6 w-6" />
						<span class="font-semibold">{tech.name}</span>
					</li>
				{/each}
			</ul>
		</Card.Content>
	</Card.Root>
</section>
<br />
<section id="projects" class="">
	<h2 class="text-center text-2xl font-bold">Utvalgte prosjekter</h2>
	<br />
	<Carousel.Root class="mx-auto w-full max-w-72 md:max-w-lg">
		<Carousel.Content>
			{#each Projects as project}
				<Carousel.Item>
					<Card.Root>
						<Card.Header>
							<Card.Title>{project.name}</Card.Title>
						</Card.Header>
						<Card.Content class="aspect-square items-center justify-center p-6">
							<img src={project.image} alt={project.name} class="h-full w-full object-cover" />
							<br />
							<p>{project.description}</p>
						</Card.Content>
						<Card.Footer>
							<Button href={project.url} class="mx-auto">Mer info</Button>
						</Card.Footer>
					</Card.Root>
				</Carousel.Item>
			{/each}
		</Carousel.Content>
		<Carousel.Previous />
		<Carousel.Next />
	</Carousel.Root>
</section>
<section class="py-12" id="services">
	<div class="container mx-auto px-4">
		<h2 class="mb-8 text-center text-3xl font-bold">Mine Tjenester</h2>
		<div class="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-4">
			{#each services as service, index}
				<Card.Root class="transition-all duration-300 hover:shadow-lg">
					<Card.Header>
						<div class="mb-4 flex h-12 w-12 items-center justify-center rounded-full bg-primary">
							<svelte:component this={service.icon} class="h-6 w-6 text-primary-foreground" />
						</div>
						<Card.Title>{service.title}</Card.Title>
					</Card.Header>
					<Card.Content>
						<Card.Description>{service.description}</Card.Description>
					</Card.Content>
				</Card.Root>
			{/each}
		</div>
	</div>
</section>
<section class="py-12">
	<div class="container mx-auto max-w-md px-4">
		<Card.Root>
			<Card.Header>
				<Card.Title class="text-center text-2xl font-bold">Kontakt meg</Card.Title>
				<Card.Description class="text-center">
					Fyll ut skjema under for å kontakte meg.
				</Card.Description>
			</Card.Header>
			<form>
				<Card.Content class="space-y-4">
					<div class="space-y-2">
						<Label for="name">Navn</Label>
						<Input id="name" name="name" placeholder="Ditt navn" bind:value={formData.name} required />
					</div>
					<div class="space-y-2">
						<Label for="email">Epost</Label>
						<Input id="email" name="email" type="email" placeholder="Din Epost" bind:value={formData.email} required />
					</div>
					<div class="space-y-2">
						<Label for="subject">Titel</Label>
						<Input id="subject" name="subject" placeholder="Titel" bind:value={formData.subject} required />
					</div>
					<div class="space-y-2">
						<Label for="message">Inhold</Label>
						<Textarea id="message" name="message" placeholder="Inhold" bind:value={formData.message} required />
					</div>
				</Card.Content>
				<Card.Footer>
					<Button class="w-full" type="submit" disabled={isSubmitting} on:click={handleSubmit}>
						{#if isSubmitting}
							"Sender..."
						{:else}
							Send Meldning
							<Send class="ml-2 h-4 w-4" />
						{/if}
					</Button>
				</Card.Footer>
			</form>
		</Card.Root>
	</div>
</section>
<footer class="py-8 text-center w-full border-2">
  <p>&copy; 2025 Mats Dale Soma. All rights reserved.</p>
</footer>



